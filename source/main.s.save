// Elvin Limpin
// 30018832
// SNES Assignment


.section    .text

.global main
main:

	gBase	.req	r7

	// Creator Credits
	LDR	r0, =msgCreator
	BL	printf

	BL	Init_GPIO

	// Get GPIO base address
	// Store in memory for future use
	// Store base in variable
	BL	getGpioPtr
	LDR	r1, =gpioBaseAddress
	STR	r0, [r1]
	LDR	r0, =gpioBaseAddress
	LDR	gBase, [r0]

	// Will be used for bit clearing
	MOV	r1, #0b111

	//GPIO9  - LAT (latch): OUTPUT
	LDR	r0, [gBase]		// Function Select Reg 0
	BIC	r0, r1, lsl #27		// clear pins 27-29
	MOV	r2, #0b001		// output code is 001
	ORR	r0, r1, lsl #27		// set to output

	STR	r0, [gBase]		// store back to gBase

	//GPIO10 - DAT (data): INPUT
	LDR	r0, [gBase, #0x04]	// Function Select Reg 1
	BIC	r0, r1			// clear pins 0-2
					// already 000 (input code)
	//GPIO11 - CLK (clock): OUTPUT
					// already Function Select Reg 1
	BIC	r0, r1, lsl #3		// Clear pins 3-5
	MOV	r1, #0b001		// output code is 001
	ORR	r0, r1, lsl #3		// set to output

	STR	r0, [gBase, #0x04]	// store back to gBase + 4

	.unreq		gBase

haltLoop:
	B		haltLoop


Init_GPIO:
	// params
	// r0 - GPIO Number
	// r1 - function code

	UDIV	r2, r0, #0xA		// Divide GPIO number by 10
	LSL	r2, #2			// Multiply by 4
	LDR	r2, [gBase, r2]		// Function Select Register 0-4
	

	MOV	pc, lr			// return

.align 2
.section .data
	msgCreator:
		.asciz 			"Created by: Elvin Limpin"

	msgPrompt:
		.asciz 			"Please press a button..."

	msgPress:
		.asciz	 		"You have pressed..."

	msgTerminate:
		.asciz	 		"Program is terminating..."

	// Buttons
		msgB1:	.asciz		"B"
		msgB2:	.asciz		"Y"
		msgB3:	.asciz		"Select"
		// msgB4 		"Start" terminates
		msgB5:	.asciz		"Joy-pad UP"
		msgB6:	.asciz		"Joy-pad DOWN"
		msgB7:	.asciz		"Joy-pad LEFT"
		msgB8:	.asciz		"Joy-pad RIGHT"
		msgB9:	.asciz		"A"
		msgB10:	.asciz		"X"
		msgB11:	.asciz		"Left"
		msgB12:	.asciz		"Right"

.global gpioBaseAddress
gpioBaseAddress:
	.int	0
